//  -------------Задание 1-------------------
// Задание 1. Подробно прочитать про метод запроса OPTIONS - и кратко его описать, когда вызывается, где используется, что передает и принимает. 

// Метод запроса OPTIONS в HTTP предназначен для получения информации о возможностях сервера. Когда клиент отправляет запрос OPTIONS к определенному ресурсу, сервер должен ответить с заголовками, указывающими на разрешенные методы запроса (например, GET, POST, PUT), поддерживаемые заголовки, возможные методы аутентификации и другие детали.

// Когда вызывается:
// Когда клиент хочет узнать о возможностях сервера, прежде чем отправить реальные запросы.
// Когда клиенту нужно узнать, какие методы и заголовки поддерживает сервер для определенного ресурса.

// Где используется:
// Веб-приложения для проверки возможностей сервера и корректной настройки запросов.
// При разработке API для предоставления клиентам информации о доступных действиях и опциях.

// Что передает и принимает:
// Клиент отправляет запрос OPTIONS к определенному ресурсу.
// Сервер отвечает с заголовками, содержащими информацию о поддерживаемых методах запроса, поддерживаемых заголовках и других опциях для данного ресурса.

// В кратком итоге, метод OPTIONS полезен для клиентов, которые хотят узнать о доступных опциях сервера, прежде чем отправить реальные запросы. Он предоставляет информацию о возможностях сервера без передачи реальных данных.

//   -------------Задание 2-------------------
// Задание 2. Прочитать и описать ключевые особенности "HTTP" Версии 3.0

// Протокол QUIC: HTTP/3 использует протокол QUIC вместо TCP для транспортировки данных. QUIC работает поверх UDP и предоставляет множество преимуществ, таких как мультиплексирование, улучшенное управление потоками и быстрое установление соединений.
// Мультиплексирование: HTTP/3 поддерживает мультиплексирование, что позволяет одновременно отправлять несколько запросов через одно соединение. Это снижает задержки и улучшает производительность передачи данных.
// Улучшенная безопасность: HTTP/3 стандартизирует использование шифрования с помощью протокола TLS, обеспечивая защищенную передачу данных по умолчанию.
// Более быстрая загрузка страниц: Благодаря оптимизациям, таким как уменьшение задержек соединения и улучшенное мультиплексирование, HTTP/3 способствует более быстрой загрузке веб-страниц и ресурсов.
// Улучшенная обработка ошибок: HTTP/3 включает в себя механизмы для более эффективной обработки ошибок и переподключения, что делает протокол более надежным в условиях непостоянной или нестабильной сети.

//   -------------Задание 3-------------------
// Задание 3. Прочитать про способы отмены запроса, включая объект "AbortController"

// Когда мы отправляем запрос на сервер (например, чтобы получить данные или отправить форму), мы можем столкнуться с ситуацией, когда нужно прервать этот запрос, например, если пользователь нажимает кнопку "отмена" или переходит на другую страницу.
// Один из способов сделать это - использовать объект "AbortController". Это как кнопка "стоп". Мы создаем контроллер, а затем передаем его в наш запрос. Если нам нужно отменить запрос, мы нажимаем эту кнопку "стоп", вызывая метод "abort()" на контроллере. После этого запрос прерывается, и мы можем выполнить другие действия.

// -------------Задание 4-------------------
// Задание 4. Написать по 2 примера создания примитивных значений (если есть несколько способов - использовать) (string, number, boolean, null, undefined, symbol, bigInt)

// 1. string
// let greeting = "Hello, world!"
// let message = new String('This is a message')

// 2. number
// let age = 30
// let temperature = new Number(25)

// 3. boolean
// let isLogged = true
// let isValid = new Boolean(false)

// 4. null
// let value = null
// let data
// data = null

// 5. undefined
// let variable
// console.log(variable)

// let status = undefined

// 6. symbol
// const mySymbol = Symbol('description')
// const uniqueSymbol = Symbol()

// 7. bigInt 
// const bigInteger = 123456789012345678901234567890n
// const anotherBigInt = BigInt("123456789012345678901234567890")

// -------------Задание 5-------------------
// Задание 5. Почему, если обратиться к переменным созданным через let, const до их объявления - мы получаем ReferenceError? 

// Потому что переменные, объявленные с помощью ключевых слов let и const, находятся в состоянии "временной мертвой зоны" (temporal dead zone) до момента их фактического объявления. В этом состоянии переменные существуют, но не могут быть доступны для чтения или записи. Попытка обратиться к таким переменным приводит к ошибке ReferenceError.

// -------------Задание 6-------------------
// Задание 6. Решить: 

// const res = "B" + "a" + (1 - "hello");
// console.log(res); // BaNaN

// const res2 = (true && 3) + "d";
// console.log(res2); // 3d

// const res3 = Boolean(true && 3) + "d";
// console.log(res3); // trued

